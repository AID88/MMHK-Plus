/* 
	Created by Jactari
	Updated by Aspirin and Aendawyn
	Maintained by Aendawyn

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
	
*/

function inArray(tableau,valeur){
    for(var k=0;k<tableau.length;k++){
        if(tableau[k]==valeur)return true
    }
    return false
}
function inArrayIndex(tableau,valeur){
    for(var k in tableau){
        if(tableau[k]==valeur)return k;
    }
    return null
}
function maxInArrayIndex(tableau){
    var k=null;
    var max=0;
    for(var i in tableau){
        if(tableau[i]>max){
            k=i;
            max=tableau[i]
        }
    }
    return k;
}
function strcmp(str1,str2){
    return((str1==str2)?0:((str1>str2)?1:-1))
}
function toCapitalCase(chaine){
    chaine='<span class="cap">'+chaine+'</span>';
    return chaine
}
function dump(arr,level){
    var dumped_text="";
    if(!level)level=0;
    var level_padding="";
    for(var j=0;j<level+1;j++)level_padding+="    ";
    if(typeof(arr)=='object'){
        for(var item in arr){
            var value=arr[item];
            if(typeof(value)=='object'){
                dumped_text+=level_padding+"'"+item+"' ...\n";
                dumped_text+=dump(value,level+1)
            }else{
                dumped_text+=level_padding+"'"+item+"' => \""+value+"\"\n"
            }
        }
    }else{
        dumped_text="===>"+arr+"<===("+typeof(arr)+")"
    }
    return dumped_text
}
function nombre_flottant(chaine){
    chaine=chaine.toString();
    var reg=/^(-)?(\d+)(?:[.,](\d+))?$/;
    var res=reg.exec(chaine);
    if(res===null)return null;
    if(res[3]!==undefined){
        var decimale=res[3]/Math.pow(10,res[3].length)
    }else{
        var decimale=0
    }
    if(res[2]!==undefined){
        var nombre=parseInt(res[2]);
        nombre+=decimale
    }else return null;
    if(res[1]!==undefined){
        nombre*=-1
    }
    return nombre
}
function formate_zeros(nombre,zeros,booleen){
    var texte='';
    if(booleen){
        for(var i=zeros-1;i>0;i--){
            if(nombre<Math.pow(10,i))texte+='0'
        }
    }
    texte+=nombre;
    return texte
}
function formate_honneur(honneur){
    var texte='';
    if(honneur>0)texte+='+';
    honneur*=100;
    texte+=formate_nombre(honneur,2)+'%';
    return texte
}
function formate_puissance(puissance){
    return formate_nombre(puissance,0)
}
function puissance(nombre,puissance){
    var resultat=1;
    for(var p=1;p<=puissance;p++)resultat*=nombre;
    return resultat
}
function formate_nombre_tooltip(nombre,decimales){
    if(decimales===undefined)decimales=0;
    return formate_nombre(nombre,decimales,'proche',false,false)
}
function formate_nombre(nombre,decimales,arrondi,supp_zeros_finaux,detail){
    var separateur_decimales={
        fr:',',
        en:'.',
        es:',',
        de:',',
        ru:','
    };

    var separateur_milliers={
        fr:String.fromCharCode(160),
        en:',',
        es:'.',
        de:String.fromCharCode(160),
        ru:String.fromCharCode(160)
    };

    if(arrondi===undefined)arrondi='proche';
    if(supp_zeros_finaux===undefined)supp_zeros_finaux=false;
    if(detail===undefined)detail=true;
    if(nombre<0){
        var texte='-';
        nombre*=-1
    }else{
        var texte=''
    }
    var temp=nombre*Math.pow(10,decimales);
    temp=Math.round(temp*100)/100;
    switch(arrondi){
        case'superieur':
            var temp_arrondi=Math.ceil(temp);
            break;
        case'inferieur':
            var temp_arrondi=Math.floor(temp);
            break;
        case'proche':default:
            var temp_arrondi=Math.round(temp);
            break
    }
    if(temp!=temp_arrondi&&detail)texte+='<abbr title="'+nombre+'">';
    var debut=false;
    for(var i=(9+decimales);i>=0;i--){
        var chiffre=Math.floor(temp_arrondi/Math.pow(10,i))-(Math.floor(temp_arrondi/Math.pow(10,i+1))*10);
        if(chiffre===0&&(debut||(temp_arrondi<Math.pow(10,decimales)&&i===decimales))){
            texte+='0';
            debut=true
        }
        if(chiffre!==0){
            texte+=chiffre;
            debut=true
        }
        if(i===decimales&&decimales>0)texte+=separateur_decimales[_langue];
        if(((i-decimales)%3)===0&&i>decimales&&debut)texte+=separateur_milliers[_langue]
    }
    if(temp!=temp_arrondi&&detail)texte+='</abbr>';
    if(supp_zeros_finaux&&decimales>0){
        texte=texte.replace(/0+$/,'');
        texte=texte.replace(/[,.]$/,'')
    }
    return texte
}
function formate_duree_minutes(minutes){
    if(minutes>=1440){
        var jours=Math.floor(minutes/1440);
        minutes-=(jours*1440)
    }
    if(minutes>=60){
        var heures=Math.floor(minutes/60);
        minutes-=(heures*60)
    }
    var texte='';
    if(jours!==undefined)texte+=jours+'d ';
    if(heures!==undefined)texte+=heures+'h ';
    if(minutes>0)texte+=minutes+'min';
    return texte
}
function controle_saison(){
    if(typeof _fortifications!='undefined'){
        _fortifications[1].bonus=15;
        _fortifications[2].bonus=30;
        _fortifications[3].bonus=40
    }
    if(typeof _artefacts!='undefined'&&typeof _effets!='undefined'){
        _effets[14].v=[2,4,6];
        for(var a in{
            43:43,
            54:54,
            62:62,
            76:76,
            77:77,
            79:79,
            94:94,
            134:134,
            135:135,
            136:136,
            137:137,
            138:138,
            139:139,
            140:140,
            141:141
        })_artefacts[a].bonus.ap/=2
    }
    var bombardement = true;
    if($('#saison').val()==3) {
        for (var s in _sorts) {
            if (_sorts[s].nom['en'] == 'Sickness') {
                _sorts[s].puissance = .5;
            }
            if (_sorts[s].nom['en'] == 'Stone Spikes') {
                _sorts[s].puissance = 0.6;
            } else if (_sorts[s].nom['en'] == 'Fireball') {
                _sorts[s].puissance = 0.35;
            } else if (_sorts[s].nom['en'] == 'Implosion') {
                _sorts[s].puissance = 0.45;
            } else if (_sorts[s].nom['en'] == 'Guard Break') {
                _sorts[s].puissance = 0.17;
            } else if (_sorts[s].nom['en'] == 'Scourge') {
                _sorts[s].puissance = 0.15;
            } else if (_sorts[s].nom['en'] == 'Word of Light') {
                _sorts[s].puissance = 110;
            } else if (_sorts[s].nom['en'] == 'Resurrection') {
                _sorts[s].puissance = 0.3;
            } else if (_sorts[s].nom['en'] == 'Fist of Wrath') {
                _sorts[s].puissance = 0.45;
            } else if (_sorts[s].nom['en'] == 'Raise Dead'){
                _sorts[s].puissance = 0.25;
            } else if (_sorts[s].nom['en'] == 'Fire Trap') {
                _sorts[s].puissance = 0.25;
            } else if (_sorts[s].nom['en'] == 'Summon Elementals') {
                _sorts[s].puissance = 150;
            } else if (_sorts[s].nom['en'] == 'Conjure Phoenix') {
                _sorts[s].puissance = 0.27;
            }
        }
        if(typeof _competences_hereditaires!='undefined'){
            _competences_hereditaires.relever_les_morts.bonus=[0,3.75,7.5,11.25,15,18.75,22.5,26.25,30,33.75,37.5];
            _competences_hereditaires.moral_eleve.bonus=[0,1.2,2.4,3.6,4.8,6,7.2,8.4,9.6,10.8,12];
            _competences_hereditaires.resurrection.bonus=[0,0.4,0.8,1.2,1.6,2,2.4,2.8,3.2,3.6,4];
            _competences_hereditaires.tir_de_barrage.bonus=[0,1.5,3,4.5,6,7.5,9,10.5,12,13.5,15]
        }
    } else { // season 4
        for (var s in _sorts) {
            if (_sorts[s].nom['en'] == 'Sickness') {
                _sorts[s].puissance = .5;
                if($('#saison').val() == '4b') {
                    _sorts[s].puissance = .7;
                }
            }
            if (_sorts[s].nom['en'] == 'Stone Spikes') {
                _sorts[s].puissance = 0.7;
            } else if (_sorts[s].nom['en'] == 'Fireball') {
                _sorts[s].puissance = 0.325;
            } else if (_sorts[s].nom['en'] == 'Implosion') {
                _sorts[s].puissance = .4;
            } else if (_sorts[s].nom['en'] == 'Guard Break') {
                _sorts[s].puissance = 0.25;
            } else if (_sorts[s].nom['en'] == 'Scourge') {
                _sorts[s].puissance = 0.2;
            } else if (_sorts[s].nom['en'] == 'Word of Light') {
                _sorts[s].puissance = 160;
            } else if (_sorts[s].nom['en'] == 'Resurrection') {
                _sorts[s].puissance = 0.4;
            } else if (_sorts[s].nom['en'] == 'Fist of Wrath') {
                _sorts[s].puissance = 0.7;
            } else if (_sorts[s].nom['en'] == 'Raise Dead') {
                _sorts[s].puissance = 0.45;
            } else if (_sorts[s].nom['en'] == 'Fire Trap') {
                _sorts[s].puissance = 0.3;
            } else if (_sorts[s].nom['en'] == 'Summon Elementals') {
                _sorts[s].puissance = 200;
            } else if (_sorts[s].nom['en'] == 'Conjure Phoenix') {
                _sorts[s].puissance = 0.22;
            }
        }
        if(typeof _competences_hereditaires!='undefined') {
            _competences_hereditaires.butin_de_guerre.bonus=[0,3.3,6.6,9.9,13.2,16.5,19.8,23.1,26.4,29.7,33];
            _competences_hereditaires.relever_les_morts.bonus=[0,3.375,6.75,10.125,13.5,16.875,20.25,23.625,27.0,30.375,33.75];
            _competences_hereditaires.resistance_magique.bonus=[0,4.05,8.1,12.15,16.2,20.25,24.3,28.35,32.4,36.45,40.5];
            _competences_hereditaires.moral_eleve.bonus=[0,2,4,6,8,10,12,14,16,18,20];
            _competences_hereditaires.resurrection.bonus=[0,0.4,0.8,1.2,1.6,2,2.4,2.8,3.2,3.6,4];
            _competences_hereditaires.tir_de_barrage.bonus=[0,1.65,3.3,4.95,6.6,8.25,9.9,11.55,13.2,14.85,16.5];
            _competences_hereditaires.maitrise_des_sorts.bonus.valeur=[0,11,11,11,11,11,16.5,22,27.5,33,38.5];
            _competences_hereditaires.revelation_de_caracteristiques.bonus.a=[0,2,2,2,7,3,3,10,4,4,13];
            _competences_hereditaires.contribution_populaire.bonus=[0,0.45,0.9,1.35,1.8,2.25,2.7,3.15,3.6,4.05,4.5];
            _competences_hereditaires.recrutement_quotidien.bonus=[0,0.55,1.1,1.65,2.2,2.75,3.3,3.85,4.4,4.95,5.5];
            _competences_hereditaires.mysticisme.bonus=[0,5.4,10.8,16.2,21.6,27.0,32.4,37.8,43.2,48.6,54.0];
        }
    }
    return bombardement;
}
function javascript_active(){
    $('#javascript-desactive').addClass('cache');
    $('#conteneur').removeClass('cache')
}

function saveVersionInCookie() {
    var ver = $('#saison').val();
    var cookieData = cookieGetValueByKey();
    cookieData.version = ver;
    $.cookie('jactari_cookie', JSON.stringify(cookieData), {
        expires: 30,
        path: '/'
    });
}

function affichage_version() {
    var ver = 4;
    if (typeof $.cookie('jactari_cookie') != 'undefined') {
        ver = cookieGetValueByKey('version');
    }
    var label = ' <label for="saison">'+_traduction.saison[_langue]+'</label>';
    var select = '<select id="saison">';
    for (var v in _versions) {
        var value = _versions[v];
        var title = value;
        var is_select = '';
        if (value == ver) {
            is_select = 'selected="selected"';
        }
        if (value == '4b') {
            title = '4 bug';
        }
        select += '<option value="'+value+'" '+is_select+'>'+title+'</option>';
    }
    select += '</select>';

    $('#version').html(_traduction.version_jeu[_langue]+' '+_version.v+' ('+_version.date+')'+label+select);
    $('#saison').css('font-size', '1.3em');
    controle_saison();
}
function temoins_navigation() {
    var nouvelle_saison=$.cookie('nouvelle_saison')||false;
    if(nouvelle_saison==1&&!$('#saison-2').is(':checked'))$('#saison-2').click();
    controle_saison();
    return{
        nouvelle_saison:nouvelle_saison
    }
}

function tinyUrlSubmit(url){
    $.getJSON(
        'scripts/ajax.html',
        {
            cat : 'tinyurl',
            action : 'submit',
            url : url
        }
    );
}

function tinyUrlGet(url){
    $.getJSON(
        'scripts/ajax.html',
        {
            cat : 'tinyurl',
            action : 'getC',
            url : url
        },
        function(data) {
            _('function');
            return data.returnData;
        }
    );
}

function commentsSubmit(){
    $('#comment_valid').val('1');
    $.getJSON(
        'scripts/ajax.html',
        {
            valid : $('#comment_valid').val(),
            cat : 'comments',
            action : 'submit',
            name : $('#comment_name').val(),
            email : $('#comment_email').val(),
            comment : JSON.stringify($('#comment_text').val())
        }
    );
    setTimeout(function(){
        commentsGet(1)
    }, 500);
}

function commentsGet(page){
    if (typeof page == 'undefined') {
        var page = 1;
    }
    $.getJSON(
        'scripts/ajax.html',
        {
            cat : 'comments',
            action : 'get',
            page : page
        },
        function(data){
            $('#comments').html(data.returnData);
        }
    );
}

function _(variable) {
    console.log(variable);
}
function cookieGetValueByKey(key) {
    var cookieData = {};
    if (typeof $.cookie('jactari_buildings') != 'undefined') {
        cookieData = $.cookie('jactari_buildings');
        $.cookie('jactari_buildings', '', {
            expires: -1,
            path: '/'
        });
        $.cookie('jactari_cookie', cookieData, {
            expires: 30,
            path: '/'
        });
    }
    if (typeof $.cookie('jactari_cookie') != 'undefined') {
        try {
            cookieData = JSON.parse($.cookie('jactari_cookie'));
        } catch(e) {
            $.cookie('jactari_cookie', '', {
                expires: -1,
                path: '/'
            });
            return {};
        }
        if (typeof key != 'undefined') {
            if (typeof cookieData[key] != 'undefined') {
                return cookieData[key];
            }
        } else {
            return cookieData;
        }
    }
    return {};
}